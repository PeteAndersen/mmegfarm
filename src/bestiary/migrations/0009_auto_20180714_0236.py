# Generated by Django 2.0.6 on 2018-07-14 02:36

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('bestiary', '0008_auto_20180711_0706'),
    ]

    operations = [
        migrations.CreateModel(
            name='Boss',
            fields=[
                ('creature_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bestiary.Creature')),
                ('type', models.CharField(choices=[('boss', 'Boss'), ('miniboss', 'Miniboss')], max_length=15)),
                ('level', models.IntegerField()),
            ],
            bases=('bestiary.creature',),
        ),
        migrations.CreateModel(
            name='DropGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instant', models.BooleanField(default=False, help_text='Drops when running with Instant Tickets')),
                ('xp', models.IntegerField()),
                ('crystals', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Drops',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('probability', models.FloatField(help_text='Chance of reward')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.DropGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Dungeon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.CharField(db_index=True, max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('group', models.CharField(choices=[('GroupElements', 'Elemental Dungeon'), ('GroupGlyphs', 'Glyph Dungeon'), ('GroupTwinTowers', 'Tower of Trials'), ('GroupEventDungeon', 'Event Dungeon'), ('ScenarioDungeon', 'Shattered Islands Scenario')], max_length=25)),
                ('always_available', models.BooleanField(default=True)),
                ('days_available', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=[], size=None)),
                ('months_available', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=[], size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField()),
                ('rank', models.IntegerField(default=1)),
                ('hpMulti', models.FloatField(default=1)),
                ('attackMulti', models.FloatField(default=1)),
                ('defenseMulti', models.FloatField(default=1)),
                ('speedMulti', models.FloatField(default=1)),
                ('criticalChanceMulti', models.FloatField(default=1)),
                ('criticalDamageMulti', models.FloatField(default=1)),
                ('accuracyMulti', models.FloatField(default=1)),
                ('resistanceMulti', models.FloatField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.CharField(db_index=True, max_length=50)),
                ('order', models.IntegerField()),
                ('difficulty', models.CharField(blank=True, max_length=15, null=True)),
                ('slots', models.IntegerField(help_text='Creatures allowed to bring')),
                ('energy_cost', models.IntegerField()),
                ('dungeon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Dungeon')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Wave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.CharField(db_index=True, max_length=50)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Level')),
            ],
        ),
        migrations.AlterModelOptions(
            name='spell',
            options={'ordering': ['slot']},
        ),
        migrations.RemoveField(
            model_name='creature',
            name='evolvesTo',
        ),
        migrations.AddField(
            model_name='creature',
            name='evolvesFrom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evolvesTo', to='bestiary.Creature'),
        ),
        migrations.AlterUniqueTogether(
            name='spell',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='enemy',
            name='creature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Creature'),
        ),
        migrations.AddField(
            model_name='enemy',
            name='wave',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Wave'),
        ),
        migrations.AddField(
            model_name='dropgroup',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bestiary.Level'),
        ),
    ]
